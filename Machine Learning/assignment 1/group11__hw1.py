# -*- coding: utf-8 -*-
"""Group11 _HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dD12pxKSS-xtfXFqTLKG-huoU2-raT91

##Importing th Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %config InlineBackend.figure.format='png'
# %matplotlib inline

"""##Importing the dataset"""

!gdown --id 1tyHrxSNY-yMixUlgVcp3CunnwpPausow
!gdown --id 1gOWHX8K21CNS98sC4aFSrhFCsCtEHirj

train = pd.read_csv("/content/DUMD_train.csv")
test = pd.read_csv("/content/DUMD_test.csv")
train.head()

test.head()

"""##Manipulating the dataset"""

train.describe()

test.describe()

train.info()

test.info()

"""## Splitting features and labels"""

x_train = train.iloc[:,:-1].values
y_train= train.iloc[:,-1].values
x_train

y_train

x_test = test.iloc[:,:-1].values
y_test= test.iloc[:,-1].values
x_test

y_test

"""## Label Encoder"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y_train = le.fit_transform(y_train)
y_test = le.fit_transform(y_test)
y_train

y_test

"""## Feature selection"""

from sklearn.feature_selection import SelectKBest,f_classif
select = SelectKBest(score_func=f_classif,k=2)
y_train = y_train.reshape(len(y_train),1)
x_train_score=select.fit(x_train,y_train)
np.set_printoptions(precision=2)
print(x_train_score.scores_)
x_train_new = x_train_score.transform(x_train)
x_train_new

x_test_new = x_test[:,3:5]
x_test_new

"""##Modeling for multiclasses

1. SVC
"""

from sklearn.svm import SVC
classifier_svc = SVC(kernel="rbf")
classifier_svc.fit(x_train_new,y_train)
y_pred_svc = classifier_svc.predict(x_test_new)
y_pred_svc

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report,ConfusionMatrixDisplay
cm_svc=confusion_matrix(y_test,y_pred_svc)
cr_svc = classification_report(y_test,y_pred_svc)
acc_svc=accuracy_score(y_test,y_pred_svc)
disp = ConfusionMatrixDisplay(confusion_matrix =cm_svc,display_labels=classifier_svc.classes_)
disp.plot()
print(cm_svc)
print(cr_svc)
print("Accuracy : {:.2f}%".format(acc_svc))

"""2. Perceptron"""

from sklearn.linear_model import Perceptron
classifier_perc = Perceptron(tol=0.001,random_state=0 )
classifier_perc.fit(x_train_new,y_train)
y_pred_perc = classifier_perc.predict(x_test_new)
y_pred_perc

cm_perc = confusion_matrix(y_test,y_pred_perc)
cr_perc = classification_report(y_test,y_pred_perc)
acc_perc = accuracy_score(y_test,y_pred_perc)
disp = ConfusionMatrixDisplay(confusion_matrix = cm_perc,display_labels=classifier_perc.classes_)
disp.plot()
print(cm_perc)
print(cr_perc)
print("Accuracy : {:.2f}%".format(acc_perc))

"""##Visualization

1. SVC
"""

sns.scatterplot('LPR','PEG',hue = 'UNS',data =train)
h = .02  # step size in the mesh
# create a mesh to plot in
x_min, x_max = x_train_new[:,0].min() - 1, x_train_new[:,0].max() + 1
y_min, y_max = x_train_new[:,1].min() - 1, x_train_new[:,1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h),np.arange(y_min, y_max, h))
Z = classifier_svc.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z,alpha =0.5) 
plt.title("SVC for Multiclasses for train data using (Kernel='rbf')");

sns.scatterplot('LPR','PEG',hue = 'UNS',data =test)
h = .02  # step size in the mesh
# create a mesh to plot in
x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))

z = classifier_svc.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC for Multiclasses for test data usinge(kernel='rbf')");

"""2. Perceptron"""

sns.scatterplot('LPR','PEG',hue = 'UNS',data =train)
h = .02  # step size in the mesh
# create a mesh to plot in
x_min, x_max = x_train_new[:,0].min() - 1, x_train_new[:,0].max() + 1
y_min, y_max = x_train_new[:,1].min() - 1, x_train_new[:,1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h),np.arange(y_min, y_max, h))
Z = classifier_perc.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z,alpha =0.5)
plt.title("Perceptron for multiclasses for train data");

sns.scatterplot('LPR','PEG',hue = 'UNS',data =test)
h = .02  # step size in the mesh
# create a mesh to plot in
x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))

z = classifier_perc.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("Perceptron for multiclasses for test data");

"""## One versus all"""

from sklearn.preprocessing import MultiLabelBinarizer
mle = MultiLabelBinarizer()
y_train_new= mle.fit_transform(y_train)
y_train_new

y_test=y_test.reshape(-1,1)
y_test_new= mle.fit_transform(y_test)
y_test_new

"""1. SVC (Modeling and visulaization)"""

y_pred_svc_ovr = pd.DataFrame()
for i in range (4):
  classifier_svc_ovr = SVC(kernel='rbf', probability=True)
  classifier_svc_ovr.fit(x_train_new, y_train_new[:,i])
  y_pred_svc_ovr[i]=classifier_svc_ovr.predict_proba(x_test_new)[:,1]
  sns.scatterplot('LPR','PEG',hue=y_train_new[:,i],data=train)
  x_min, x_max = x_train_new[:, 0].min() - 1, x_train_new[:, 0].max() + 1
  y_min, y_max = x_train_new[:, 1].min() - 1, x_train_new[:, 1].max() + 1
  xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
  z = classifier_svc_ovr.predict(np.c_[xx.ravel(), yy.ravel()])
  Z= z.reshape(xx.shape)
  plt.contourf(xx, yy, Z, alpha=0.5)
  plt.title("SVC for one versus rest train data using rbf kernel {:.2f}".format(i+1))
  plt.show();

y_pred_svc_ovr = pd.DataFrame()
for i in range (4):
  classifier_svc_ovr = SVC(kernel='rbf', probability=True)
  classifier_svc_ovr.fit(x_train_new, y_train_new[:,i])
  score=classifier_svc_ovr.score(x_train_new,y_train_new[:,i])*100
  y_pred_svc_ovr[i]=classifier_svc_ovr.predict_proba(x_test_new)[:,1]
  sns.scatterplot('LPR','PEG',hue=y_test_new[:,i],data=test)
  x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
  y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
  xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
  z = classifier_svc_ovr.predict(np.c_[xx.ravel(), yy.ravel()])
  Z= z.reshape(xx.shape)
  plt.contourf(xx, yy, Z, alpha=0.5)
  plt.title("SVC for one versus rest test data using rbf kernel {:.2f}".format(i+1))
  plt.show()

probabilties_ovr= y_pred_svc_ovr.to_numpy()
ar_ovr =np.argmax(probabilties_ovr, axis=1)
ar_ovr

y_test = [item for sublist in y_test for item in sublist]

cm_ovr = confusion_matrix(y_test,ar_ovr)
acc_ovr = accuracy_score(y_test,ar_ovr)
disp = ConfusionMatrixDisplay(confusion_matrix =cm_ovr,display_labels =classifier_svc_ovr.classes_)
disp.plot()
print(acc_ovr)
cm_ovr

y_pred_svc_ovr = pd.DataFrame()
for i in range (4):
  classifier_svc_ovr = SVC(kernel='linear', probability=True)
  classifier_svc_ovr.fit(x_train_new, y_train_new[:,i])
  y_pred_svc_ovr[i]=classifier_svc_ovr.predict_proba(x_test_new)[:,1]
  sns.scatterplot('LPR','PEG',hue=y_train_new[:,i],data=train)
  x_min, x_max = x_train_new[:, 0].min() - 1, x_train_new[:, 0].max() + 1
  y_min, y_max = x_train_new[:, 1].min() - 1, x_train_new[:, 1].max() + 1
  xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
  z = classifier_svc_ovr.predict(np.c_[xx.ravel(), yy.ravel()])
  Z= z.reshape(xx.shape)
  plt.contourf(xx, yy, Z, alpha=0.5)
  plt.title("SVC for one versus rest train data using linear kernel {:.2f}".format(i+1))
  plt.show();

y_pred_svc_ovr = pd.DataFrame()
for i in range (4):
  classifier_svc_ovr = SVC(kernel='linear', probability=True)
  classifier_svc_ovr.fit(x_train_new, y_train_new[:,i])
  score=classifier_svc_ovr.score(x_train_new,y_train_new[:,i])*100
  y_pred_svc_ovr[i]=classifier_svc_ovr.predict_proba(x_test_new)[:,1]
  sns.scatterplot('LPR','PEG',hue=y_test_new[:,i],data=test)
  x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
  y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
  xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
  z = classifier_svc_ovr.predict(np.c_[xx.ravel(), yy.ravel()])
  Z= z.reshape(xx.shape)
  plt.contourf(xx, yy, Z, alpha=0.5)
  plt.title("SVC for one versus rest test data using linear kernel {:.2f}".format(i+1))
  plt.show()

probabilties_ovr= y_pred_svc_ovr.to_numpy()
ar_ovr =np.argmax(probabilties_ovr, axis=1)
ar_ovr

cm_ovr = confusion_matrix(y_test,ar_ovr)
acc_ovr = accuracy_score(y_test,ar_ovr)
disp = ConfusionMatrixDisplay(confusion_matrix =cm_ovr,display_labels =classifier_svc_ovr.classes_)
disp.plot()
print(acc_ovr)
cm_ovr

"""## One versus one


"""

train = pd.DataFrame(x_train_new,columns=['LPR','PEG'])
train['UNS']=y_train
test = pd.DataFrame(x_test_new,columns=['LPR','PEG'])
test['UNS']=y_test

y_train_1=[];x_train_1=pd.DataFrame()
y_train_2=[];x_train_2=pd.DataFrame()
y_train_3=[];x_train_3=pd.DataFrame()
y_train_4=[];x_train_4=pd.DataFrame()
y_train_5=[];x_train_5=pd.DataFrame()
y_train_6=[];x_train_6=pd.DataFrame()
for i in range(len(train)):
  if train.UNS[i]==0 or train.UNS[i]==1:
    x_train_1[i] = train.iloc[i,[0,1]]
    y_train_1.append(train.UNS[i])
  if train.UNS[i]==0 or train.UNS[i] ==2:
    x_train_2[i] = train.iloc[i,[0,1]]
    y_train_2.append(train.UNS[i])
  if train.UNS[i]==0 or train.UNS[i] ==3:
    x_train_3[i] = train.iloc[i,[0,1]]
    y_train_3.append(train.UNS[i])
  if train.UNS[i] ==1 or train.UNS[i] ==2:
    x_train_4[i] = train.iloc[i,[0,1]]
    y_train_4.append(train.UNS[i])
  if train.UNS[i] ==1 or train.UNS[i] ==3:
    x_train_5[i] = train.iloc[i,[0,1]]
    y_train_5.append(train.UNS[i])
  if train.UNS[i] ==2 or train.UNS[i] ==3:
    x_train_6[i] = train.iloc[i,[0,1]]
    y_train_6.append(train.UNS[i])
x_train_1=x_train_1.T.to_numpy()
x_train_2=x_train_2.T.to_numpy()
x_train_3=x_train_3.T.to_numpy()
x_train_4=x_train_4.T.to_numpy()
x_train_5=x_train_5.T.to_numpy()
x_train_6=x_train_6.T.to_numpy()

"""SVC (Modeling and Visualization)"""

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_1, y_train_1)
y_pred_svc_ovo_1=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_train_1[:,0],x_train_1[:,1],hue=y_train_1,data=x_train_1)
x_min, x_max = x_train_1[:, 0].min() - 1, x_train_1[:, 0].max() + 1
y_min, y_max = x_train_1[:, 1].min() - 1, x_train_1[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC FOR one versus one train data 1")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_2, y_train_2)
y_pred_svc_ovo_1=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_train_2[:,0],x_train_2[:,1],hue=y_train_2,data=x_train_2)
x_min, x_max = x_train_2[:, 0].min() - 1, x_train_2[:, 0].max() + 1
y_min, y_max = x_train_2[:, 1].min() - 1, x_train_2[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC FOR one versus one train data 2")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_3, y_train_3)
y_pred_svc_ovo_1=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_train_3[:,0],x_train_3[:,1],hue=y_train_3,data=x_train_3)
x_min, x_max = x_train_3[:, 0].min() - 1, x_train_3[:, 0].max() + 1
y_min, y_max = x_train_3[:, 1].min() - 1, x_train_3[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC FOR one versus one train data 3")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_4, y_train_4)
y_pred_svc_ovo_1=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_train_4[:,0],x_train_4[:,1],hue=y_train_4,data=x_train_4)
x_min, x_max = x_train_4[:, 0].min() - 1, x_train_4[:, 0].max() + 1
y_min, y_max = x_train_4[:, 1].min() - 1, x_train_4[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC FOR one versus one train data 4")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_5, y_train_5)
y_pred_svc_ovo_1=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_train_5[:,0],x_train_5[:,1],hue=y_train_5,data=x_train_5)
x_min, x_max = x_train_5[:, 0].min() - 1, x_train_5[:, 0].max() + 1
y_min, y_max = x_train_5[:, 1].min() - 1, x_train_5[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC FOR one versus one train data 5")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_6, y_train_6)
y_pred_svc_ovo_1=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_train_6[:,0],x_train_6[:,1],hue=y_train_6,data=x_train_6)
x_min, x_max = x_train_6[:, 0].min() - 1, x_train_6[:, 0].max() + 1
y_min, y_max = x_train_6[:, 1].min() - 1, x_train_6[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC for one versus one train data 6")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_1, y_train_1)
y_pred_svc_ovo_1=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_test_new[:,0],x_test_new[:,1],hue=y_test,data=x_test_new)
x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC FOR one versus one test data 2")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();
print(y_pred_svc_ovo_1)

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_2, y_train_2)
y_pred_svc_ovo_2=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_test_new[:,0],x_test_new[:,1],hue=y_test,data=x_test_new)
x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC FOR one versus one test data 2")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();
print(y_pred_svc_ovo_2)

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_3, y_train_3)
y_pred_svc_ovo_3=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_test_new[:,0],x_test_new[:,1],hue=y_test,data=x_test_new)
x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC for one versus one test data 3")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();
print(y_pred_svc_ovo_3)

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_4, y_train_4)
y_pred_svc_ovo_4=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_test_new[:,0],x_test_new[:,1],hue=y_test,data=x_test_new)
x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC FOR one versus one test data 4")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();
print(y_pred_svc_ovo_4)

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_5, y_train_5)
y_pred_svc_ovo_5=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_test_new[:,0],x_test_new[:,1],hue=y_test,data=x_test_new)
x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC for one versus one test data 5")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();
print(y_pred_svc_ovo_5)

classifier_svc_ovo = SVC(kernel='rbf', probability=True)
classifier_svc_ovo.fit(x_train_6, y_train_6)
y_pred_svc_ovo_6=classifier_svc_ovo.predict_proba(x_test_new)
sns.scatterplot(x_test_new[:,0],x_test_new[:,1],hue=y_test,data=x_test_new)
x_min, x_max = x_test_new[:, 0].min() - 1, x_test_new[:, 0].max() + 1
y_min, y_max = x_test_new[:, 1].min() - 1, x_test_new[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
z = classifier_svc_ovo.predict(np.c_[xx.ravel(), yy.ravel()])
Z= z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.5)
plt.title("SVC for one versus one test data 6")
plt.xlabel("PEG")
plt.ylabel("LPR")
plt.show();
print(y_pred_svc_ovo_6)

sum_0 = y_pred_svc_ovo_1[:,0] + y_pred_svc_ovo_2[:,0] + y_pred_svc_ovo_3[:,0]
sum_1 = y_pred_svc_ovo_1[:,1] + y_pred_svc_ovo_4[:,0] + y_pred_svc_ovo_5[:,0]
sum_2 = y_pred_svc_ovo_2[:,1] + y_pred_svc_ovo_4[:,1] + y_pred_svc_ovo_6[:,0]
sum_3 = y_pred_svc_ovo_3[:,1] + y_pred_svc_ovo_5[:,1] + y_pred_svc_ovo_6[:,1]
classes_0 = (sum_0/3).reshape(-1,1)
classes_1 = (sum_1/3).reshape(-1,1)
classes_2 = (sum_2/3).reshape(-1,1)
classes_3 = (sum_3/3).reshape(-1,1)
classes_0

probabilties_ovo = np.hstack((classes_0,classes_1,classes_2,classes_3))
probabilties_ovo

ar_ovo =np.argmax(probabilties_ovo, axis=1)
ar_ovo

cm_ovo =confusion_matrix(y_test,ar_ovo)
disp = ConfusionMatrixDisplay(confusion_matrix =cm_ovo,display_labels=[0,1,2,3])
accuracy_1 = accuracy_score(y_test,ar_ovo)
print(accuracy_1)
disp.plot()
cm_ovo